// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: github.com/openconfig/bootz/proto/bootz.proto

package bootz

import (
	authz "github.com/openconfig/gnsi/authz"
	certz "github.com/openconfig/gnsi/certz"
	credentialz "github.com/openconfig/gnsi/credentialz"
	pathz "github.com/openconfig/gnsi/pathz"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BootMode int32

const (
	BootMode_BOOT_MODE_UNSPECIFIED BootMode = 0
	BootMode_BOOT_MODE_INSECURE    BootMode = 1
	BootMode_BOOT_MODE_SECURE      BootMode = 2
)

// Enum value maps for BootMode.
var (
	BootMode_name = map[int32]string{
		0: "BOOT_MODE_UNSPECIFIED",
		1: "BOOT_MODE_INSECURE",
		2: "BOOT_MODE_SECURE",
	}
	BootMode_value = map[string]int32{
		"BOOT_MODE_UNSPECIFIED": 0,
		"BOOT_MODE_INSECURE":    1,
		"BOOT_MODE_SECURE":      2,
	}
)

func (x BootMode) Enum() *BootMode {
	p := new(BootMode)
	*p = x
	return p
}

func (x BootMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BootMode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes[0].Descriptor()
}

func (BootMode) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes[0]
}

func (x BootMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BootMode.Descriptor instead.
func (BootMode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{0}
}

type ControlCardState_ControlCardStatus int32

const (
	ControlCardState_CONTROL_CARD_STATUS_UNSPECIFIED     ControlCardState_ControlCardStatus = 0
	ControlCardState_CONTROL_CARD_STATUS_NOT_INITIALIZED ControlCardState_ControlCardStatus = 1
	ControlCardState_CONTROL_CARD_STATUS_INITIALIZED     ControlCardState_ControlCardStatus = 2
)

// Enum value maps for ControlCardState_ControlCardStatus.
var (
	ControlCardState_ControlCardStatus_name = map[int32]string{
		0: "CONTROL_CARD_STATUS_UNSPECIFIED",
		1: "CONTROL_CARD_STATUS_NOT_INITIALIZED",
		2: "CONTROL_CARD_STATUS_INITIALIZED",
	}
	ControlCardState_ControlCardStatus_value = map[string]int32{
		"CONTROL_CARD_STATUS_UNSPECIFIED":     0,
		"CONTROL_CARD_STATUS_NOT_INITIALIZED": 1,
		"CONTROL_CARD_STATUS_INITIALIZED":     2,
	}
)

func (x ControlCardState_ControlCardStatus) Enum() *ControlCardState_ControlCardStatus {
	p := new(ControlCardState_ControlCardStatus)
	*p = x
	return p
}

func (x ControlCardState_ControlCardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlCardState_ControlCardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes[1].Descriptor()
}

func (ControlCardState_ControlCardStatus) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes[1]
}

func (x ControlCardState_ControlCardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlCardState_ControlCardStatus.Descriptor instead.
func (ControlCardState_ControlCardStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{5, 0}
}

type ReportStatusRequest_BootstrapStatus int32

const (
	ReportStatusRequest_BOOTSTRAP_STATUS_UNSPECIFIED ReportStatusRequest_BootstrapStatus = 0
	ReportStatusRequest_BOOTSTRAP_STATUS_SUCCESS     ReportStatusRequest_BootstrapStatus = 1
	ReportStatusRequest_BOOTSTRAP_STATUS_FAILURE     ReportStatusRequest_BootstrapStatus = 2
	ReportStatusRequest_BOOTSTRAP_STATUS_INITIATED   ReportStatusRequest_BootstrapStatus = 3
)

// Enum value maps for ReportStatusRequest_BootstrapStatus.
var (
	ReportStatusRequest_BootstrapStatus_name = map[int32]string{
		0: "BOOTSTRAP_STATUS_UNSPECIFIED",
		1: "BOOTSTRAP_STATUS_SUCCESS",
		2: "BOOTSTRAP_STATUS_FAILURE",
		3: "BOOTSTRAP_STATUS_INITIATED",
	}
	ReportStatusRequest_BootstrapStatus_value = map[string]int32{
		"BOOTSTRAP_STATUS_UNSPECIFIED": 0,
		"BOOTSTRAP_STATUS_SUCCESS":     1,
		"BOOTSTRAP_STATUS_FAILURE":     2,
		"BOOTSTRAP_STATUS_INITIATED":   3,
	}
)

func (x ReportStatusRequest_BootstrapStatus) Enum() *ReportStatusRequest_BootstrapStatus {
	p := new(ReportStatusRequest_BootstrapStatus)
	*p = x
	return p
}

func (x ReportStatusRequest_BootstrapStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportStatusRequest_BootstrapStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes[2].Descriptor()
}

func (ReportStatusRequest_BootstrapStatus) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes[2]
}

func (x ReportStatusRequest_BootstrapStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportStatusRequest_BootstrapStatus.Descriptor instead.
func (ReportStatusRequest_BootstrapStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{14, 0}
}

type GetBootstrapDataRequest struct {
	state             protoimpl.MessageState            `protogen:"open.v1"`
	ChassisDescriptor *ChassisDescriptor                `protobuf:"bytes,1,opt,name=chassis_descriptor,json=chassisDescriptor,proto3" json:"chassis_descriptor,omitempty"`
	ControlCardState  *ControlCardState                 `protobuf:"bytes,2,opt,name=control_card_state,json=controlCardState,proto3" json:"control_card_state,omitempty"`
	Nonce             string                            `protobuf:"bytes,1001,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Identity          *GetBootstrapDataRequest_Identity `protobuf:"bytes,1003,opt,name=identity,proto3" json:"identity,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetBootstrapDataRequest) Reset() {
	*x = GetBootstrapDataRequest{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBootstrapDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootstrapDataRequest) ProtoMessage() {}

func (x *GetBootstrapDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootstrapDataRequest.ProtoReflect.Descriptor instead.
func (*GetBootstrapDataRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{0}
}

func (x *GetBootstrapDataRequest) GetChassisDescriptor() *ChassisDescriptor {
	if x != nil {
		return x.ChassisDescriptor
	}
	return nil
}

func (x *GetBootstrapDataRequest) GetControlCardState() *ControlCardState {
	if x != nil {
		return x.ControlCardState
	}
	return nil
}

func (x *GetBootstrapDataRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *GetBootstrapDataRequest) GetIdentity() *GetBootstrapDataRequest_Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

type BootstrapStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*BootstrapStreamRequest_BootstrapRequest
	//	*BootstrapStreamRequest_Response_
	Type          isBootstrapStreamRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapStreamRequest) Reset() {
	*x = BootstrapStreamRequest{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapStreamRequest) ProtoMessage() {}

func (x *BootstrapStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapStreamRequest.ProtoReflect.Descriptor instead.
func (*BootstrapStreamRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{1}
}

func (x *BootstrapStreamRequest) GetType() isBootstrapStreamRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *BootstrapStreamRequest) GetBootstrapRequest() *GetBootstrapDataRequest {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamRequest_BootstrapRequest); ok {
			return x.BootstrapRequest
		}
	}
	return nil
}

func (x *BootstrapStreamRequest) GetResponse() *BootstrapStreamRequest_Response {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamRequest_Response_); ok {
			return x.Response
		}
	}
	return nil
}

type isBootstrapStreamRequest_Type interface {
	isBootstrapStreamRequest_Type()
}

type BootstrapStreamRequest_BootstrapRequest struct {
	BootstrapRequest *GetBootstrapDataRequest `protobuf:"bytes,1,opt,name=bootstrap_request,json=bootstrapRequest,proto3,oneof"`
}

type BootstrapStreamRequest_Response_ struct {
	Response *BootstrapStreamRequest_Response `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

func (*BootstrapStreamRequest_BootstrapRequest) isBootstrapStreamRequest_Type() {}

func (*BootstrapStreamRequest_Response_) isBootstrapStreamRequest_Type() {}

type BootstrapStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*BootstrapStreamResponse_Challenge_
	//	*BootstrapStreamResponse_BootstrapResponse
	Type          isBootstrapStreamResponse_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapStreamResponse) Reset() {
	*x = BootstrapStreamResponse{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapStreamResponse) ProtoMessage() {}

func (x *BootstrapStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapStreamResponse.ProtoReflect.Descriptor instead.
func (*BootstrapStreamResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{2}
}

func (x *BootstrapStreamResponse) GetType() isBootstrapStreamResponse_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *BootstrapStreamResponse) GetChallenge() *BootstrapStreamResponse_Challenge {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamResponse_Challenge_); ok {
			return x.Challenge
		}
	}
	return nil
}

func (x *BootstrapStreamResponse) GetBootstrapResponse() *GetBootstrapDataResponse {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamResponse_BootstrapResponse); ok {
			return x.BootstrapResponse
		}
	}
	return nil
}

type isBootstrapStreamResponse_Type interface {
	isBootstrapStreamResponse_Type()
}

type BootstrapStreamResponse_Challenge_ struct {
	Challenge *BootstrapStreamResponse_Challenge `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type BootstrapStreamResponse_BootstrapResponse struct {
	BootstrapResponse *GetBootstrapDataResponse `protobuf:"bytes,2,opt,name=bootstrap_response,json=bootstrapResponse,proto3,oneof"`
}

func (*BootstrapStreamResponse_Challenge_) isBootstrapStreamResponse_Type() {}

func (*BootstrapStreamResponse_BootstrapResponse) isBootstrapStreamResponse_Type() {}

type ChassisDescriptor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Manufacturer  string                 `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	PartNumber    string                 `protobuf:"bytes,2,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ControlCards  []*ControlCard         `protobuf:"bytes,4,rep,name=control_cards,json=controlCards,proto3" json:"control_cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChassisDescriptor) Reset() {
	*x = ChassisDescriptor{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChassisDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisDescriptor) ProtoMessage() {}

func (x *ChassisDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisDescriptor.ProtoReflect.Descriptor instead.
func (*ChassisDescriptor) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{3}
}

func (x *ChassisDescriptor) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ChassisDescriptor) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *ChassisDescriptor) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ChassisDescriptor) GetControlCards() []*ControlCard {
	if x != nil {
		return x.ControlCards
	}
	return nil
}

type ControlCard struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	PartNumber   string                 `protobuf:"bytes,1,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	SerialNumber string                 `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Deprecated: Marked as deprecated in github.com/openconfig/bootz/proto/bootz.proto.
	Slot          int32  `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	SlotId        string `protobuf:"bytes,4,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlCard) Reset() {
	*x = ControlCard{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCard) ProtoMessage() {}

func (x *ControlCard) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCard.ProtoReflect.Descriptor instead.
func (*ControlCard) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{4}
}

func (x *ControlCard) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *ControlCard) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/openconfig/bootz/proto/bootz.proto.
func (x *ControlCard) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ControlCard) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

type ControlCardState struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	SerialNumber  string                             `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Status        ControlCardState_ControlCardStatus `protobuf:"varint,2,opt,name=status,proto3,enum=bootz.ControlCardState_ControlCardStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlCardState) Reset() {
	*x = ControlCardState{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlCardState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCardState) ProtoMessage() {}

func (x *ControlCardState) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCardState.ProtoReflect.Descriptor instead.
func (*ControlCardState) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{5}
}

func (x *ControlCardState) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ControlCardState) GetStatus() ControlCardState_ControlCardStatus {
	if x != nil {
		return x.Status
	}
	return ControlCardState_CONTROL_CARD_STATUS_UNSPECIFIED
}

type BootstrapDataResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SerialNum        string                 `protobuf:"bytes,1,opt,name=serial_num,json=serialNum,proto3" json:"serial_num,omitempty"`
	IntendedImage    *SoftwareImage         `protobuf:"bytes,2,opt,name=intended_image,json=intendedImage,proto3" json:"intended_image,omitempty"`
	BootPasswordHash string                 `protobuf:"bytes,3,opt,name=boot_password_hash,json=bootPasswordHash,proto3" json:"boot_password_hash,omitempty"`
	ServerTrustCert  string                 `protobuf:"bytes,4,opt,name=server_trust_cert,json=serverTrustCert,proto3" json:"server_trust_cert,omitempty"`
	BootConfig       *BootConfig            `protobuf:"bytes,5,opt,name=boot_config,json=bootConfig,proto3" json:"boot_config,omitempty"`
	Credentials      *Credentials           `protobuf:"bytes,6,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Pathz            *pathz.UploadRequest   `protobuf:"bytes,7,opt,name=pathz,proto3" json:"pathz,omitempty"`
	Authz            *authz.UploadRequest   `protobuf:"bytes,8,opt,name=authz,proto3" json:"authz,omitempty"`
	// Deprecated: Marked as deprecated in github.com/openconfig/bootz/proto/bootz.proto.
	Certificates  *certz.UploadRequest `protobuf:"bytes,9,opt,name=certificates,proto3" json:"certificates,omitempty"`
	CertzProfiles *CertzProfiles       `protobuf:"bytes,10,opt,name=certz_profiles,json=certzProfiles,proto3" json:"certz_profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapDataResponse) Reset() {
	*x = BootstrapDataResponse{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapDataResponse) ProtoMessage() {}

func (x *BootstrapDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapDataResponse.ProtoReflect.Descriptor instead.
func (*BootstrapDataResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{6}
}

func (x *BootstrapDataResponse) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *BootstrapDataResponse) GetIntendedImage() *SoftwareImage {
	if x != nil {
		return x.IntendedImage
	}
	return nil
}

func (x *BootstrapDataResponse) GetBootPasswordHash() string {
	if x != nil {
		return x.BootPasswordHash
	}
	return ""
}

func (x *BootstrapDataResponse) GetServerTrustCert() string {
	if x != nil {
		return x.ServerTrustCert
	}
	return ""
}

func (x *BootstrapDataResponse) GetBootConfig() *BootConfig {
	if x != nil {
		return x.BootConfig
	}
	return nil
}

func (x *BootstrapDataResponse) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *BootstrapDataResponse) GetPathz() *pathz.UploadRequest {
	if x != nil {
		return x.Pathz
	}
	return nil
}

func (x *BootstrapDataResponse) GetAuthz() *authz.UploadRequest {
	if x != nil {
		return x.Authz
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/openconfig/bootz/proto/bootz.proto.
func (x *BootstrapDataResponse) GetCertificates() *certz.UploadRequest {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *BootstrapDataResponse) GetCertzProfiles() *CertzProfiles {
	if x != nil {
		return x.CertzProfiles
	}
	return nil
}

type CertzProfiles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profiles      []*CertzProfile        `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertzProfiles) Reset() {
	*x = CertzProfiles{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertzProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertzProfiles) ProtoMessage() {}

func (x *CertzProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertzProfiles.ProtoReflect.Descriptor instead.
func (*CertzProfiles) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{7}
}

func (x *CertzProfiles) GetProfiles() []*CertzProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type CertzProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SslProfileId  string                 `protobuf:"bytes,1,opt,name=ssl_profile_id,json=sslProfileId,proto3" json:"ssl_profile_id,omitempty"`
	Certz         *certz.UploadRequest   `protobuf:"bytes,2,opt,name=certz,proto3" json:"certz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertzProfile) Reset() {
	*x = CertzProfile{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertzProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertzProfile) ProtoMessage() {}

func (x *CertzProfile) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertzProfile.ProtoReflect.Descriptor instead.
func (*CertzProfile) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{8}
}

func (x *CertzProfile) GetSslProfileId() string {
	if x != nil {
		return x.SslProfileId
	}
	return ""
}

func (x *CertzProfile) GetCertz() *certz.UploadRequest {
	if x != nil {
		return x.Certz
	}
	return nil
}

type BootstrapDataSigned struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Responses     []*BootstrapDataResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	Nonce         string                   `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapDataSigned) Reset() {
	*x = BootstrapDataSigned{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapDataSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapDataSigned) ProtoMessage() {}

func (x *BootstrapDataSigned) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapDataSigned.ProtoReflect.Descriptor instead.
func (*BootstrapDataSigned) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{9}
}

func (x *BootstrapDataSigned) GetResponses() []*BootstrapDataResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BootstrapDataSigned) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type GetBootstrapDataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in github.com/openconfig/bootz/proto/bootz.proto.
	SignedResponse          *BootstrapDataSigned `protobuf:"bytes,1,opt,name=signed_response,json=signedResponse,proto3" json:"signed_response,omitempty"`
	OwnershipVoucher        []byte               `protobuf:"bytes,101,opt,name=ownership_voucher,json=ownershipVoucher,proto3" json:"ownership_voucher,omitempty"`
	OwnershipCertificate    []byte               `protobuf:"bytes,102,opt,name=ownership_certificate,json=ownershipCertificate,proto3" json:"ownership_certificate,omitempty"`
	ResponseSignature       string               `protobuf:"bytes,103,opt,name=response_signature,json=responseSignature,proto3" json:"response_signature,omitempty"`
	SerializedBootstrapData []byte               `protobuf:"bytes,104,opt,name=serialized_bootstrap_data,json=serializedBootstrapData,proto3" json:"serialized_bootstrap_data,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetBootstrapDataResponse) Reset() {
	*x = GetBootstrapDataResponse{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBootstrapDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootstrapDataResponse) ProtoMessage() {}

func (x *GetBootstrapDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootstrapDataResponse.ProtoReflect.Descriptor instead.
func (*GetBootstrapDataResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in github.com/openconfig/bootz/proto/bootz.proto.
func (x *GetBootstrapDataResponse) GetSignedResponse() *BootstrapDataSigned {
	if x != nil {
		return x.SignedResponse
	}
	return nil
}

func (x *GetBootstrapDataResponse) GetOwnershipVoucher() []byte {
	if x != nil {
		return x.OwnershipVoucher
	}
	return nil
}

func (x *GetBootstrapDataResponse) GetOwnershipCertificate() []byte {
	if x != nil {
		return x.OwnershipCertificate
	}
	return nil
}

func (x *GetBootstrapDataResponse) GetResponseSignature() string {
	if x != nil {
		return x.ResponseSignature
	}
	return ""
}

func (x *GetBootstrapDataResponse) GetSerializedBootstrapData() []byte {
	if x != nil {
		return x.SerializedBootstrapData
	}
	return nil
}

type SoftwareImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	OsImageHash   string                 `protobuf:"bytes,4,opt,name=os_image_hash,json=osImageHash,proto3" json:"os_image_hash,omitempty"`
	HashAlgorithm string                 `protobuf:"bytes,5,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SoftwareImage) Reset() {
	*x = SoftwareImage{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoftwareImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareImage) ProtoMessage() {}

func (x *SoftwareImage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareImage.ProtoReflect.Descriptor instead.
func (*SoftwareImage) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{11}
}

func (x *SoftwareImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SoftwareImage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SoftwareImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SoftwareImage) GetOsImageHash() string {
	if x != nil {
		return x.OsImageHash
	}
	return ""
}

func (x *SoftwareImage) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

type Credentials struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Credentials   []*credentialz.AuthorizedKeysRequest  `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
	Users         []*credentialz.AuthorizedUsersRequest `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Passwords     []*credentialz.PasswordRequest        `protobuf:"bytes,3,rep,name=passwords,proto3" json:"passwords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{12}
}

func (x *Credentials) GetCredentials() []*credentialz.AuthorizedKeysRequest {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Credentials) GetUsers() []*credentialz.AuthorizedUsersRequest {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Credentials) GetPasswords() []*credentialz.PasswordRequest {
	if x != nil {
		return x.Passwords
	}
	return nil
}

type BootConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Metadata         *structpb.Struct       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	VendorConfig     []byte                 `protobuf:"bytes,2,opt,name=vendor_config,json=vendorConfig,proto3" json:"vendor_config,omitempty"`
	OcConfig         []byte                 `protobuf:"bytes,3,opt,name=oc_config,json=ocConfig,proto3" json:"oc_config,omitempty"`
	BootloaderConfig *structpb.Struct       `protobuf:"bytes,4,opt,name=bootloader_config,json=bootloaderConfig,proto3" json:"bootloader_config,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BootConfig) Reset() {
	*x = BootConfig{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootConfig) ProtoMessage() {}

func (x *BootConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootConfig.ProtoReflect.Descriptor instead.
func (*BootConfig) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{13}
}

func (x *BootConfig) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BootConfig) GetVendorConfig() []byte {
	if x != nil {
		return x.VendorConfig
	}
	return nil
}

func (x *BootConfig) GetOcConfig() []byte {
	if x != nil {
		return x.OcConfig
	}
	return nil
}

func (x *BootConfig) GetBootloaderConfig() *structpb.Struct {
	if x != nil {
		return x.BootloaderConfig
	}
	return nil
}

type ReportStatusRequest struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Status        ReportStatusRequest_BootstrapStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bootz.ReportStatusRequest_BootstrapStatus" json:"status,omitempty"`
	StatusMessage string                              `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	States        []*ControlCardState                 `protobuf:"bytes,3,rep,name=states,proto3" json:"states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportStatusRequest) Reset() {
	*x = ReportStatusRequest{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatusRequest) ProtoMessage() {}

func (x *ReportStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatusRequest.ProtoReflect.Descriptor instead.
func (*ReportStatusRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{14}
}

func (x *ReportStatusRequest) GetStatus() ReportStatusRequest_BootstrapStatus {
	if x != nil {
		return x.Status
	}
	return ReportStatusRequest_BOOTSTRAP_STATUS_UNSPECIFIED
}

func (x *ReportStatusRequest) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ReportStatusRequest) GetStates() []*ControlCardState {
	if x != nil {
		return x.States
	}
	return nil
}

type EmptyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{15}
}

type GetBootstrapDataRequest_Identity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*GetBootstrapDataRequest_Identity_IdevidCert
	//	*GetBootstrapDataRequest_Identity_EkPub
	//	*GetBootstrapDataRequest_Identity_PpkPub
	Type          isGetBootstrapDataRequest_Identity_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBootstrapDataRequest_Identity) Reset() {
	*x = GetBootstrapDataRequest_Identity{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBootstrapDataRequest_Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootstrapDataRequest_Identity) ProtoMessage() {}

func (x *GetBootstrapDataRequest_Identity) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootstrapDataRequest_Identity.ProtoReflect.Descriptor instead.
func (*GetBootstrapDataRequest_Identity) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetBootstrapDataRequest_Identity) GetType() isGetBootstrapDataRequest_Identity_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetBootstrapDataRequest_Identity) GetIdevidCert() string {
	if x != nil {
		if x, ok := x.Type.(*GetBootstrapDataRequest_Identity_IdevidCert); ok {
			return x.IdevidCert
		}
	}
	return ""
}

func (x *GetBootstrapDataRequest_Identity) GetEkPub() bool {
	if x != nil {
		if x, ok := x.Type.(*GetBootstrapDataRequest_Identity_EkPub); ok {
			return x.EkPub
		}
	}
	return false
}

func (x *GetBootstrapDataRequest_Identity) GetPpkPub() bool {
	if x != nil {
		if x, ok := x.Type.(*GetBootstrapDataRequest_Identity_PpkPub); ok {
			return x.PpkPub
		}
	}
	return false
}

type isGetBootstrapDataRequest_Identity_Type interface {
	isGetBootstrapDataRequest_Identity_Type()
}

type GetBootstrapDataRequest_Identity_IdevidCert struct {
	IdevidCert string `protobuf:"bytes,1,opt,name=idevid_cert,json=idevidCert,proto3,oneof"`
}

type GetBootstrapDataRequest_Identity_EkPub struct {
	EkPub bool `protobuf:"varint,2,opt,name=ek_pub,json=ekPub,proto3,oneof"`
}

type GetBootstrapDataRequest_Identity_PpkPub struct {
	PpkPub bool `protobuf:"varint,3,opt,name=ppk_pub,json=ppkPub,proto3,oneof"`
}

func (*GetBootstrapDataRequest_Identity_IdevidCert) isGetBootstrapDataRequest_Identity_Type() {}

func (*GetBootstrapDataRequest_Identity_EkPub) isGetBootstrapDataRequest_Identity_Type() {}

func (*GetBootstrapDataRequest_Identity_PpkPub) isGetBootstrapDataRequest_Identity_Type() {}

type BootstrapStreamRequest_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*BootstrapStreamRequest_Response_NonceSigned
	//	*BootstrapStreamRequest_Response_Nonce
	Type          isBootstrapStreamRequest_Response_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapStreamRequest_Response) Reset() {
	*x = BootstrapStreamRequest_Response{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapStreamRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapStreamRequest_Response) ProtoMessage() {}

func (x *BootstrapStreamRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapStreamRequest_Response.ProtoReflect.Descriptor instead.
func (*BootstrapStreamRequest_Response) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BootstrapStreamRequest_Response) GetType() isBootstrapStreamRequest_Response_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *BootstrapStreamRequest_Response) GetNonceSigned() []byte {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamRequest_Response_NonceSigned); ok {
			return x.NonceSigned
		}
	}
	return nil
}

func (x *BootstrapStreamRequest_Response) GetNonce() string {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamRequest_Response_Nonce); ok {
			return x.Nonce
		}
	}
	return ""
}

type isBootstrapStreamRequest_Response_Type interface {
	isBootstrapStreamRequest_Response_Type()
}

type BootstrapStreamRequest_Response_NonceSigned struct {
	NonceSigned []byte `protobuf:"bytes,1,opt,name=nonce_signed,json=nonceSigned,proto3,oneof"`
}

type BootstrapStreamRequest_Response_Nonce struct {
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3,oneof"`
}

func (*BootstrapStreamRequest_Response_NonceSigned) isBootstrapStreamRequest_Response_Type() {}

func (*BootstrapStreamRequest_Response_Nonce) isBootstrapStreamRequest_Response_Type() {}

type BootstrapStreamResponse_Challenge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*BootstrapStreamResponse_Challenge_Nonce
	//	*BootstrapStreamResponse_Challenge_NonceEncrypted
	Type          isBootstrapStreamResponse_Challenge_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapStreamResponse_Challenge) Reset() {
	*x = BootstrapStreamResponse_Challenge{}
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapStreamResponse_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapStreamResponse_Challenge) ProtoMessage() {}

func (x *BootstrapStreamResponse_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapStreamResponse_Challenge.ProtoReflect.Descriptor instead.
func (*BootstrapStreamResponse_Challenge) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BootstrapStreamResponse_Challenge) GetType() isBootstrapStreamResponse_Challenge_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *BootstrapStreamResponse_Challenge) GetNonce() string {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamResponse_Challenge_Nonce); ok {
			return x.Nonce
		}
	}
	return ""
}

func (x *BootstrapStreamResponse_Challenge) GetNonceEncrypted() []byte {
	if x != nil {
		if x, ok := x.Type.(*BootstrapStreamResponse_Challenge_NonceEncrypted); ok {
			return x.NonceEncrypted
		}
	}
	return nil
}

type isBootstrapStreamResponse_Challenge_Type interface {
	isBootstrapStreamResponse_Challenge_Type()
}

type BootstrapStreamResponse_Challenge_Nonce struct {
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3,oneof"`
}

type BootstrapStreamResponse_Challenge_NonceEncrypted struct {
	NonceEncrypted []byte `protobuf:"bytes,2,opt,name=nonce_encrypted,json=nonceEncrypted,proto3,oneof"`
}

func (*BootstrapStreamResponse_Challenge_Nonce) isBootstrapStreamResponse_Challenge_Type() {}

func (*BootstrapStreamResponse_Challenge_NonceEncrypted) isBootstrapStreamResponse_Challenge_Type() {}

var File_github_com_openconfig_bootz_proto_bootz_proto protoreflect.FileDescriptor

var file_github_com_openconfig_bootz_proto_bootz_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69, 0x2f, 0x63,
	0x65, 0x72, 0x74, 0x7a, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x7a, 0x2f, 0x70, 0x61, 0x74,
	0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x6f, 0x74,
	0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x1a, 0x69, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0b, 0x69, 0x64, 0x65, 0x76, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x76, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x17, 0x0a, 0x06, 0x65, 0x6b, 0x5f, 0x70, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6b, 0x50, 0x75, 0x62, 0x12, 0x19, 0x0a, 0x07, 0x70, 0x70, 0x6b,
	0x5f, 0x70, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x70, 0x70,
	0x6b, 0x50, 0x75, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86, 0x02, 0x0a,
	0x16, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a,
	0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x4f, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x17, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x56, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x83, 0x02,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x02, 0x22, 0xa2, 0x04, 0x0a, 0x15, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a,
	0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x62, 0x6f, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x7a, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x63,
	0x65, 0x72, 0x74, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x7a,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74,
	0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f,
	0x6f, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0c, 0x43, 0x65,
	0x72, 0x74, 0x7a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x73,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x73, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x63,
	0x65, 0x72, 0x74, 0x7a, 0x22, 0x67, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xb0, 0x02,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xe2, 0x01,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x4c, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x42,
	0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x62, 0x6f,
	0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc3,
	0x02, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x4f, 0x54,
	0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x53, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x02, 0x32, 0xfe, 0x01, 0x0a, 0x09, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x62,
	0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62,
	0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x6f,
	0x6f, 0x74, 0x7a, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2e, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openconfig_bootz_proto_bootz_proto_rawDescOnce sync.Once
	file_github_com_openconfig_bootz_proto_bootz_proto_rawDescData = file_github_com_openconfig_bootz_proto_bootz_proto_rawDesc
)

func file_github_com_openconfig_bootz_proto_bootz_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_bootz_proto_bootz_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_bootz_proto_bootz_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openconfig_bootz_proto_bootz_proto_rawDescData)
	})
	return file_github_com_openconfig_bootz_proto_bootz_proto_rawDescData
}

var file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_github_com_openconfig_bootz_proto_bootz_proto_goTypes = []any{
	(BootMode)(0),                              // 0: bootz.BootMode
	(ControlCardState_ControlCardStatus)(0),    // 1: bootz.ControlCardState.ControlCardStatus
	(ReportStatusRequest_BootstrapStatus)(0),   // 2: bootz.ReportStatusRequest.BootstrapStatus
	(*GetBootstrapDataRequest)(nil),            // 3: bootz.GetBootstrapDataRequest
	(*BootstrapStreamRequest)(nil),             // 4: bootz.BootstrapStreamRequest
	(*BootstrapStreamResponse)(nil),            // 5: bootz.BootstrapStreamResponse
	(*ChassisDescriptor)(nil),                  // 6: bootz.ChassisDescriptor
	(*ControlCard)(nil),                        // 7: bootz.ControlCard
	(*ControlCardState)(nil),                   // 8: bootz.ControlCardState
	(*BootstrapDataResponse)(nil),              // 9: bootz.BootstrapDataResponse
	(*CertzProfiles)(nil),                      // 10: bootz.CertzProfiles
	(*CertzProfile)(nil),                       // 11: bootz.CertzProfile
	(*BootstrapDataSigned)(nil),                // 12: bootz.BootstrapDataSigned
	(*GetBootstrapDataResponse)(nil),           // 13: bootz.GetBootstrapDataResponse
	(*SoftwareImage)(nil),                      // 14: bootz.SoftwareImage
	(*Credentials)(nil),                        // 15: bootz.Credentials
	(*BootConfig)(nil),                         // 16: bootz.BootConfig
	(*ReportStatusRequest)(nil),                // 17: bootz.ReportStatusRequest
	(*EmptyResponse)(nil),                      // 18: bootz.EmptyResponse
	(*GetBootstrapDataRequest_Identity)(nil),   // 19: bootz.GetBootstrapDataRequest.Identity
	(*BootstrapStreamRequest_Response)(nil),    // 20: bootz.BootstrapStreamRequest.Response
	(*BootstrapStreamResponse_Challenge)(nil),  // 21: bootz.BootstrapStreamResponse.Challenge
	(*pathz.UploadRequest)(nil),                // 22: gnsi.pathz.v1.UploadRequest
	(*authz.UploadRequest)(nil),                // 23: gnsi.authz.v1.UploadRequest
	(*certz.UploadRequest)(nil),                // 24: gnsi.certz.v1.UploadRequest
	(*credentialz.AuthorizedKeysRequest)(nil),  // 25: gnsi.credentialz.v1.AuthorizedKeysRequest
	(*credentialz.AuthorizedUsersRequest)(nil), // 26: gnsi.credentialz.v1.AuthorizedUsersRequest
	(*credentialz.PasswordRequest)(nil),        // 27: gnsi.credentialz.v1.PasswordRequest
	(*structpb.Struct)(nil),                    // 28: google.protobuf.Struct
}
var file_github_com_openconfig_bootz_proto_bootz_proto_depIdxs = []int32{
	6,  // 0: bootz.GetBootstrapDataRequest.chassis_descriptor:type_name -> bootz.ChassisDescriptor
	8,  // 1: bootz.GetBootstrapDataRequest.control_card_state:type_name -> bootz.ControlCardState
	19, // 2: bootz.GetBootstrapDataRequest.identity:type_name -> bootz.GetBootstrapDataRequest.Identity
	3,  // 3: bootz.BootstrapStreamRequest.bootstrap_request:type_name -> bootz.GetBootstrapDataRequest
	20, // 4: bootz.BootstrapStreamRequest.response:type_name -> bootz.BootstrapStreamRequest.Response
	21, // 5: bootz.BootstrapStreamResponse.challenge:type_name -> bootz.BootstrapStreamResponse.Challenge
	13, // 6: bootz.BootstrapStreamResponse.bootstrap_response:type_name -> bootz.GetBootstrapDataResponse
	7,  // 7: bootz.ChassisDescriptor.control_cards:type_name -> bootz.ControlCard
	1,  // 8: bootz.ControlCardState.status:type_name -> bootz.ControlCardState.ControlCardStatus
	14, // 9: bootz.BootstrapDataResponse.intended_image:type_name -> bootz.SoftwareImage
	16, // 10: bootz.BootstrapDataResponse.boot_config:type_name -> bootz.BootConfig
	15, // 11: bootz.BootstrapDataResponse.credentials:type_name -> bootz.Credentials
	22, // 12: bootz.BootstrapDataResponse.pathz:type_name -> gnsi.pathz.v1.UploadRequest
	23, // 13: bootz.BootstrapDataResponse.authz:type_name -> gnsi.authz.v1.UploadRequest
	24, // 14: bootz.BootstrapDataResponse.certificates:type_name -> gnsi.certz.v1.UploadRequest
	10, // 15: bootz.BootstrapDataResponse.certz_profiles:type_name -> bootz.CertzProfiles
	11, // 16: bootz.CertzProfiles.profiles:type_name -> bootz.CertzProfile
	24, // 17: bootz.CertzProfile.certz:type_name -> gnsi.certz.v1.UploadRequest
	9,  // 18: bootz.BootstrapDataSigned.responses:type_name -> bootz.BootstrapDataResponse
	12, // 19: bootz.GetBootstrapDataResponse.signed_response:type_name -> bootz.BootstrapDataSigned
	25, // 20: bootz.Credentials.credentials:type_name -> gnsi.credentialz.v1.AuthorizedKeysRequest
	26, // 21: bootz.Credentials.users:type_name -> gnsi.credentialz.v1.AuthorizedUsersRequest
	27, // 22: bootz.Credentials.passwords:type_name -> gnsi.credentialz.v1.PasswordRequest
	28, // 23: bootz.BootConfig.metadata:type_name -> google.protobuf.Struct
	28, // 24: bootz.BootConfig.bootloader_config:type_name -> google.protobuf.Struct
	2,  // 25: bootz.ReportStatusRequest.status:type_name -> bootz.ReportStatusRequest.BootstrapStatus
	8,  // 26: bootz.ReportStatusRequest.states:type_name -> bootz.ControlCardState
	3,  // 27: bootz.Bootstrap.GetBootstrapData:input_type -> bootz.GetBootstrapDataRequest
	17, // 28: bootz.Bootstrap.ReportStatus:input_type -> bootz.ReportStatusRequest
	4,  // 29: bootz.Bootstrap.BootstrapStream:input_type -> bootz.BootstrapStreamRequest
	13, // 30: bootz.Bootstrap.GetBootstrapData:output_type -> bootz.GetBootstrapDataResponse
	18, // 31: bootz.Bootstrap.ReportStatus:output_type -> bootz.EmptyResponse
	5,  // 32: bootz.Bootstrap.BootstrapStream:output_type -> bootz.BootstrapStreamResponse
	30, // [30:33] is the sub-list for method output_type
	27, // [27:30] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_bootz_proto_bootz_proto_init() }
func file_github_com_openconfig_bootz_proto_bootz_proto_init() {
	if File_github_com_openconfig_bootz_proto_bootz_proto != nil {
		return
	}
	file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[1].OneofWrappers = []any{
		(*BootstrapStreamRequest_BootstrapRequest)(nil),
		(*BootstrapStreamRequest_Response_)(nil),
	}
	file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[2].OneofWrappers = []any{
		(*BootstrapStreamResponse_Challenge_)(nil),
		(*BootstrapStreamResponse_BootstrapResponse)(nil),
	}
	file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[16].OneofWrappers = []any{
		(*GetBootstrapDataRequest_Identity_IdevidCert)(nil),
		(*GetBootstrapDataRequest_Identity_EkPub)(nil),
		(*GetBootstrapDataRequest_Identity_PpkPub)(nil),
	}
	file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[17].OneofWrappers = []any{
		(*BootstrapStreamRequest_Response_NonceSigned)(nil),
		(*BootstrapStreamRequest_Response_Nonce)(nil),
	}
	file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes[18].OneofWrappers = []any{
		(*BootstrapStreamResponse_Challenge_Nonce)(nil),
		(*BootstrapStreamResponse_Challenge_NonceEncrypted)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openconfig_bootz_proto_bootz_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openconfig_bootz_proto_bootz_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_bootz_proto_bootz_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_bootz_proto_bootz_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_bootz_proto_bootz_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_bootz_proto_bootz_proto = out.File
	file_github_com_openconfig_bootz_proto_bootz_proto_rawDesc = nil
	file_github_com_openconfig_bootz_proto_bootz_proto_goTypes = nil
	file_github_com_openconfig_bootz_proto_bootz_proto_depIdxs = nil
}
