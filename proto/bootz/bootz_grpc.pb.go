// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: github.com/openconfig/bootz/proto/bootz.proto

package bootz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bootstrap_GetBootstrapData_FullMethodName = "/bootz.Bootstrap/GetBootstrapData"
	Bootstrap_ReportStatus_FullMethodName     = "/bootz.Bootstrap/ReportStatus"
	Bootstrap_BootstrapStream_FullMethodName  = "/bootz.Bootstrap/BootstrapStream"
)

// BootstrapClient is the client API for Bootstrap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapClient interface {
	GetBootstrapData(ctx context.Context, in *GetBootstrapDataRequest, opts ...grpc.CallOption) (*GetBootstrapDataResponse, error)
	ReportStatus(ctx context.Context, in *ReportStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	BootstrapStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BootstrapStreamRequest, BootstrapStreamResponse], error)
}

type bootstrapClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapClient(cc grpc.ClientConnInterface) BootstrapClient {
	return &bootstrapClient{cc}
}

func (c *bootstrapClient) GetBootstrapData(ctx context.Context, in *GetBootstrapDataRequest, opts ...grpc.CallOption) (*GetBootstrapDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBootstrapDataResponse)
	err := c.cc.Invoke(ctx, Bootstrap_GetBootstrapData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) ReportStatus(ctx context.Context, in *ReportStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Bootstrap_ReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) BootstrapStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BootstrapStreamRequest, BootstrapStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Bootstrap_ServiceDesc.Streams[0], Bootstrap_BootstrapStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BootstrapStreamRequest, BootstrapStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bootstrap_BootstrapStreamClient = grpc.BidiStreamingClient[BootstrapStreamRequest, BootstrapStreamResponse]

// BootstrapServer is the server API for Bootstrap service.
// All implementations should embed UnimplementedBootstrapServer
// for forward compatibility.
type BootstrapServer interface {
	GetBootstrapData(context.Context, *GetBootstrapDataRequest) (*GetBootstrapDataResponse, error)
	ReportStatus(context.Context, *ReportStatusRequest) (*EmptyResponse, error)
	BootstrapStream(grpc.BidiStreamingServer[BootstrapStreamRequest, BootstrapStreamResponse]) error
}

// UnimplementedBootstrapServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBootstrapServer struct{}

func (UnimplementedBootstrapServer) GetBootstrapData(context.Context, *GetBootstrapDataRequest) (*GetBootstrapDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapData not implemented")
}
func (UnimplementedBootstrapServer) ReportStatus(context.Context, *ReportStatusRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedBootstrapServer) BootstrapStream(grpc.BidiStreamingServer[BootstrapStreamRequest, BootstrapStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BootstrapStream not implemented")
}
func (UnimplementedBootstrapServer) testEmbeddedByValue() {}

// UnsafeBootstrapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServer will
// result in compilation errors.
type UnsafeBootstrapServer interface {
	mustEmbedUnimplementedBootstrapServer()
}

func RegisterBootstrapServer(s grpc.ServiceRegistrar, srv BootstrapServer) {
	// If the following call pancis, it indicates UnimplementedBootstrapServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bootstrap_ServiceDesc, srv)
}

func _Bootstrap_GetBootstrapData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBootstrapDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).GetBootstrapData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bootstrap_GetBootstrapData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).GetBootstrapData(ctx, req.(*GetBootstrapDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bootstrap_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).ReportStatus(ctx, req.(*ReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_BootstrapStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BootstrapServer).BootstrapStream(&grpc.GenericServerStream[BootstrapStreamRequest, BootstrapStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bootstrap_BootstrapStreamServer = grpc.BidiStreamingServer[BootstrapStreamRequest, BootstrapStreamResponse]

// Bootstrap_ServiceDesc is the grpc.ServiceDesc for Bootstrap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bootstrap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bootz.Bootstrap",
	HandlerType: (*BootstrapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBootstrapData",
			Handler:    _Bootstrap_GetBootstrapData_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _Bootstrap_ReportStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BootstrapStream",
			Handler:       _Bootstrap_BootstrapStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/bootz/proto/bootz.proto",
}
